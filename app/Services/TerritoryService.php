<?php

namespace Square\Services;

use DB;
use Square\Models\Territory;
use Square\Repositories\TerritoryRepository;
use Square\Services\Contracts\SquareServiceInterface;
use Square\Services\Contracts\TerritoryServiceInterface;
use Symfony\Component\Routing\Exception\ResourceNotFoundException;

class TerritoryService extends TerritoryRepository implements TerritoryServiceInterface
{

    protected $squareService;

    function __construct(Territory $territory , SquareServiceInterface $squareService)
    {
        parent::__construct($territory);
        $this->squareService = $squareService;
    }

    public function allTerritoriesSquares()
    {
       $territories = parent::allTerritoriesSquares();
       return $territories;
    }

    public function create(array $data)
    {

        DB::beginTransaction();

        try{

            $territoriesAll = $this->allTerritoriesSquares();

            foreach($territoriesAll as $t) {

                $endArea = json_decode($t->end);
                $startArea = json_decode($t->start);

                if($data['start']['x'] < $endArea->x || $data['start']['y'] < $endArea->y
                 || $data['start']['x'] < $startArea->x || $data['start']['y'] < $startArea->y
                ){
                    throw new \Exception("territory-overlay", 404);
                }
            }

            $data['area'] = $data['end']['x'] * $data['end']['y'];

            $territory = parent::create($data);
            $territory['painted_area'] = 0;

            $starts = $data['start']['x'];
            $ends = $data['end']['x'] + $starts;

            for($start = $starts ; $start < $ends;$start++) {
                for ($end = 1; $end <= $data['end']['y']; $end++) {
                    $square = array();
                    $square['x'] = $start;
                    $square['y'] = $end;
                    $square['painted'] = false;
                    $square['territory_id'] = $territory->id;

                    $this->squareService->create($square);
                }
            }

            DB::commit();
            return $territory;

        }catch (\Exception $ex){
            DB::rollback();
            throw new \Exception($ex->getMessage(), $ex->getCode());
        }
    }

    public function deleteSquareTerritoryId($territory_id)
    {

        $territory = $this->find($territory_id);

        if($territory == null){
            throw new ResourceNotFoundException("This territory was not found",404);
        }

        DB::beginTransaction();

        try{
            $this->squareService->deleteSquareTerritoryId($territory_id);
            parent::delete($territory_id); // TODO: Change the autogenerated stub
            DB::commit();
            return true;
        }catch (\Exception $ex){
            DB::rollback();
        }
    }

    public function FindByTerritoriesIdSquares($id , $withpainted = null)
    {
        $territories = null;

        if($withpainted != null){
            $territories = parent::FindByTerritoriesIdSquaresWithPainted($id, $withpainted);

            if($territories == null){
                throw new ResourceNotFoundException("This territory was not found",404);
            }

            $territories = $territories->toArray();

            $territories['painted_area'] = count($territories['squares']);
            $territories['painted_squares'] = $territories['squares'];
            unset($territories['squares']);
        }else{
            $territories = parent::FindByTerritoriesIdSquares($id);
        }

        if($territories == null ){
            throw new ResourceNotFoundException("This territory was not found",404);
        }

        return $territories;


    }

    public function orderPainted()
    {
        $territories = parent::allTerritoriesOrderPaintedSquares();

        if($territories == null ){
            throw new ResourceNotFoundException("This territory was not found",404);
        }

        return $territories;
    }

    public function orderProportionalPainted()
    {
        $territories = parent::orderProportionalPainted();

        if($territories == null ){
            throw new ResourceNotFoundException("This territory was not found",404);
        }

        return $territories;
    }

    public function paintedTotalArea()
    {
        $territories = parent::paintedTotalArea();

        if($territories == null ){
            throw new ResourceNotFoundException("This territory was not found",404);
        }

        $listaPaintedArea = array();

        foreach($territories as $ter){
            $ter->div_painted_area =  $ter->painted_area / $ter->area;
            array_push($listaPaintedArea, $ter);
        }

        return $listaPaintedArea;
    }
}